"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/VPdxDRlwlS3
 */
import { Label } from "./ui/label";
import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from "./ui/select";
import { Button } from "./ui/Button";
import {
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "./ui/dialog";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { getSettings } from "@/app/server/getSettings";
import { Skeleton } from "./ui/skeleton";
import { Currency, Language, Settings } from "@prisma/client";
import { updateSettings } from "@/app/server/updateSettings";
import { useState } from "react";
import { toast } from "sonner";

const languageMap = {
  PL: "Polish",
  EN: "English",
} satisfies Record<Language, string>;

export function Settings({
  userId,
  setIsOpen,
}: {
  userId: string;
  setIsOpen: (isOpen: boolean) => void;
}) {
  const queryClient = useQueryClient();
  const { data: settings, status: settingsStatus } = useQuery({
    queryKey: ["settings"],
    queryFn: () => getSettings(userId),
  });
  const { mutate, isPending: isMutationPending } = useMutation({
    mutationKey: ["settings"],
    mutationFn: updateSettings,
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ["settings"] });
      setIsOpen(false);
    },
    onError: (e) => {
      toast.error(e.message);
    },
    onSuccess: () => {
      toast.success("Settings updated");
    },
  });
  const isSettingsLoading = settingsStatus === "pending";
  return (
    <DialogContent className="w-72">
      <form
        action={(formData) => {
          const language = formData.get("language");
          const currency = formData.get("currency");
          if (correctCurrency(currency) && correctLanguage(language)) {
            mutate({ userId, language, currency });
          } else {
            throw new Error("Invalid form data");
          }
        }}
      >
        <DialogHeader>
          <DialogTitle>Settings</DialogTitle>
          <DialogDescription>Customize your preferences.</DialogDescription>
        </DialogHeader>
        <div className="flex flex-col gap-4 py-8">
          <div>
            <Label htmlFor="language">Language</Label>
            <LanguageSelect settings={settings} isLoading={isSettingsLoading} />
          </div>
          <div>
            <Label htmlFor="currency">Currency</Label>
            <CurrencySelect settings={settings} isLoading={isSettingsLoading} />
          </div>
        </div>
        <DialogFooter>
          <Button
            disabled={isMutationPending}
            type="submit"
            className="ml-auto"
          >
            Save
          </Button>
        </DialogFooter>
      </form>
    </DialogContent>
  );
}

const LanguageSelect = ({
  settings,
  isLoading,
}: {
  settings?: Settings | null;
  isLoading: boolean;
}) => {
  if (isLoading) {
    return <Skeleton className="h-9 w-full" />;
  }
  return (
    <Select name="language" defaultValue={settings?.language}>
      <SelectTrigger>
        <SelectValue />
      </SelectTrigger>
      <SelectContent>
        {(Object.keys(Language) as Language[]).map((language) => (
          <SelectItem key={language} value={language}>
            {languageMap[language]}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};

const CurrencySelect = ({
  settings,
  isLoading,
}: {
  settings?: Settings | null;
  isLoading: boolean;
}) => {
  if (isLoading) {
    return <Skeleton className="h-9 w-full" />;
  }
  return (
    <Select name="currency" defaultValue={settings?.currency}>
      <SelectTrigger>
        <SelectValue />
      </SelectTrigger>
      <SelectContent>
        {(Object.keys(Currency) as Currency[]).map((currency) => (
          <SelectItem key={currency} value={currency}>
            {currency}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};

function correctLanguage(language: unknown): language is Language {
  return typeof language === "string" && language in Language;
}

function correctCurrency(currency: unknown): currency is Currency {
  return typeof currency === "string" && currency in Currency;
}
